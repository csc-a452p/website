openapi: 3.0.3
info:
  title: 情報工学同好会(非公認) API
  description: |-
    このAPIは無保証で提供され、突然API仕様が変更される可能性があります。あらかじめご了承ください。  
    ほとんど静的ファイルを返してるだけです。
  version: "1.0"
servers:
  - url: https://csc.nikachu.net
    description: 本番サーバ
  - url: http://localhost:3000
tags:
  - name: errata
    description: 正誤情報を取得する
  - name: event
    description: 参加したイベントに関する情報を取得する
  - name: goods
    description: 販売品に関する情報を取得する
  - name: pdflib
    description: PDFライブラリの項目を取得する
  - name: notice
    description: お知らせを取得する

paths:
  /data/errata.json:
    summary: 正誤情報のリスト
    description: 正誤情報のある販売品のリストを返します。
    get:
      summary: 正誤情報のリスト
      description: |
        正誤情報のある販売品のリストを返します。
        errataIDが返り、errataIDから正誤情報の詳細を取得できます。
      operationId: getErrataList
      tags:
        - errata
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                required:
                  - errata
                properties:
                  errata:
                    type: array
                    description: errataIDの配列
                    items:
                      type: string
                    example:
                      - ngo_vol1
  /data/errata/{errataID}.json:
    summary: 正誤情報のデータ
    description: 指定されたIDの正誤情報を返します
    get:
      summary: 正誤情報のデータ
      description: 指定されたIDの正誤情報を返します
      operationId: getErrataData
      tags:
        - errata
      parameters:
        - name: errataID
          in: path
          required: true
          schema:
            type: string
            example: ngo_vol1
          description: 販売品につくgoodsIDと同じになります。
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/errataItem"
                example:
                  "1":
                    - at: "p.4 14,15行目(数式込)"
                      wrongImg: "/assets/errata/ngo_vol1/wrong_1_1.svg"
                      correctImg: "/assets/errata/ngo_vol1/correct_1_1.svg"
  /data/event.json:
    summary: イベントのリストを取得
    description: 全イベントの一覧を取得します
    get:
      summary: イベントのリストを取得
      description: |
        全イベントの一覧を取得します。  
        eventIDの配列が返り、eventIDからイベントの内容を取得できます。
      operationId: getEventList
      tags:
        - event
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    type: array
                    description: eventIDの配列
                    items:
                      type: string
                    example:
                      - nitncfes_59
  /data/event/{eventID}.json:
    summary: イベントの内容を取得
    description: イベントの名称や販売品などを取得できます。
    get:
      summary: イベントの内容を取得
      description: イベントの名称や販売品などを取得できます。
      operationId: getEventData
      tags:
        - event

      parameters:
        - name: eventID
          required: true
          in: path
          schema:
            type: string
            description: イベントのキー
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
  /data/goods.json:
    summary: 販売品のリストを取得
    description: 全販売品のリストを取得します
    get:
      summary: 販売品のリストを取得
      description: |
        全販売品のリストを取得します。  
        goodsIDの配列が返り、goodsIDから販売品の詳細を取得できます。
      operationId: getGoodsList
      tags:
        - goods
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                required:
                  - goods
                properties:
                  goods:
                    type: array
                    description: goodsIDの配列
                    items:
                      type: string
                    example:
                      - ngo_vol1
  /data/goods_newly.json:
    summary: 新刊や新商品である販売品を取得
    get:
      summary: 新刊や新商品である販売品を取得
      description: |
        新刊や新商品である販売品を取得します。
        新刊の定義は一番近くに行ったイベントで初めて販売したものとします。
      operationId: getNewlyGoodsList
      tags:
        - goods
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                required:
                  - newly
                properties:
                  newly:
                    type: array
                    items:
                      type: string
                      description: 新刊のgoodsID
                      example: ngo_vol1
  /data/goods/{goodsID}.json:
    summary: 販売品の詳細を取得
    get:
      summary: 販売品の詳細を取得
      description: |
        販売品の詳細を取得できます。  
        本とその他の商品でレスポンスの形式が違います。`type`キーで判別することができます。
      operationId: getGoodsData
      tags:
        - goods
      parameters:
        - name: goodsID
          required: true
          in: path
          schema:
            type: string
            description: goodsID
            example: ngo_vol1
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/goodsBook"
                  - $ref: "#/components/schemas/goodsItem"
                discriminator:
                  propertyName: type
                  mapping:
                    book: "#/components/schemas/goodsBook"
                    item: "#/components/schemas/goodsItem"
  /data/pdflib/list.json:
    summary: PDFライブラリのリストを取得
    get:
      summary: PDFライブラリのリストを取得
      description: |
        PDFライブラリの一覧を取得できます。
        実際のPDFファイルは`/assets/pdflib/{pdflibID}.pdf`にあります。
      operationId: getPdflibList
      tags:
        - pdflib
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                description: キーはpdflibIDになります。
                additionalProperties:
                  type: string
                  description: |
                    タイトル
                    キーはpdflibIDになります。
                  example: スマートフォンのセンサを利用したパソコンの遠隔操作
  /data/notice.json:
    summary: お知らせを取得
    get:
      summary: お知らせを取得
      description: |
        お知らせを取得できます。
        お知らせは１回のレスポンスですべてのデータが流れてきます。
      operationId: getNotice
      tags:
        - notice
      responses:
        200:
          description: 成功時のレスポンス
          content:
            application/json:
              schema:
                type: object
                required:
                  - notice
                properties:
                  notice:
                    $ref: "#/components/schemas/notice"

components:
  schemas:
    errataItem:
      type: object
      description: |
        各正誤情報のデータ  
        wrong,correctまたはwrongImg,correctImgどちらかは必ず存在します。画像がある場合は画像を優先して利用してください。
      required:
        - at
      properties:
        at:
          type: string
          description: 正誤の場所
          example: p.4 14,15行目(数式込)
        wrong:
          type: string
          description: 訂正前の文字列
        correct:
          type: string
          description: 訂正後の文字列
        wrongImg:
          type: string
          description: |
            訂正前の画像への相対URL
            ベースURLはAPIのベースと同じ wrongがない場合必ず存在
        correctImg:
          type: string
          description: |
            訂正後の画像への相対URL
            ベースURLはAPIのベースと同じ correctがない場合必ず存在
    event:
      type: object
      description: |
        イベントのデータ
      required:
        - name
        - start
        - end
        - place
        - sell
      properties:
        name:
          type: object
          required:
            - full
            - name
            - count
          properties:
            full:
              type: string
              description: 全体の名前
              example: 沼津高専 第59回高専祭
            name:
              type: string
              description: イベントの名前
              example: "沼津高専 高専祭"
            count:
              type: integer
              format: int64
              description: イベントの回数の部分
              example: 59
        start:
          type: string
          description: イベントの開始日
          example: "2024-11-09"
          format: date
        end:
          type: string
          description: イベントの終了日
          example: "2024-11-10"
          format: date
        place:
          type: string
          description: 出店場所
          example: 講義棟1F M3教室(内線番号2603)
        sell:
          type: array
          items:
            type: object
            required:
              - isNewly
              - name
              - id
              - price
              - priceUnit
            properties:
              isNewly:
                type: boolean
                description: 新刊かどうか
                example: true
              name:
                type: string
                description: 商品名 goodsIDから取得できるものと同一
                example: ンゴシリーズ vol.1
              id:
                type: string
                description: 商品のgoodsID
                example: ngo_vol1
              price:
                $ref: "#/components/schemas/price"
              priceUnit:
                $ref: "#/components/schemas/priceUnit"
        additionalLinks:
          type: object
          description: キーにはリンク名称が入ります
          additionalProperties:
            type: string
            description: リンク先のURL
            pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
            example: https://example.com
        willPart:
          type: boolean
          description: |
            参加予定(今後参加)かどうか
            イベント終了後数日以内に更新するはずです。
          example: false
    goodsBook:
      type: object
      required:
        - type
        - title
        - series
        - vol
        - releaseDate
        - description
        - thumbnail
        - code
        - pages
        - author
        - tableOfContents
        - genre
        - language
        - tags
        - isR18
        - price
        - priceUnit
        - size
        - notes
        - salesHistory
        - revisionHistory
      properties:
        type:
          type: "string"
          description: 販売品のタイプ(定数)
          enum:
            - book
        title:
          type: string
          description: タイトル全体
          example: ンゴシリーズ vol.1
        series:
          type: string
          description: シリーズ名 シリーズでない場合はタイトルと同一
          example: ンゴシリーズ
        vol:
          type: integer
          description: 号数(単発の場合は1)
          example: 1
        releaseDate:
          type: string
          format: date
          description: 初刊発行日
          example: "2024-11-01"
        description:
          type: string
          description: 紹介文
          example: 高専生が、情報や数理系のジャンルでまとめたいと思ったことをまとめる「ンゴシリーズ」のvol.1です。
        thumbnail:
          type: string
          description: サムネイル画像への相対アドレス
          example: /assets/goods/ngo_vol1/front.png
        code:
          oneOf:
            - $ref: "#/components/schemas/bookCodeISDN"
          discriminator:
            propertyName: type
            mapping:
              isdn: "#/components/schemas/bookCodeISDN"
        pages:
          type: integer
          minimum: 1
          description: 表紙込みのページ数
          example: 52
        author:
          type: object
          required:
            - show
            - detail
          properties:
            show:
              type: string
              description: 奥付記載の著者
              example: "情報工学同好会 総員"
            detail:
              type: array
              description: 著者のID一覧
              items:
                type: string
              example:
                - s23112
                - s23113
                - s23114
                - s23118
                - s23125
                - s23131
        tableOfContents:
          type: array
          description: 目次の配列
          items:
            type: string
          example:
            - "ビュフォンの針やるンゴ"
            - "コンパイラ作るンゴ"
            - "沼津高専の学生証解説するンゴ"
            - "ジェネリックSwitchBot作るンゴ"
            - ".oud2解析するンゴ"
            - "RSA暗号使うンゴ"
            - "深層学習やるンゴ"
        genre:
          type: string
          description: ジャンルの配列
          items:
            type: string
          example:
            - general
        language:
          type: string
          description: |
            書籍内の言語
            ISO 639-1に準拠しています
          minLength: 2
          maxLength: 2
          example: ja
        isR18:
          type: boolean
          description: えっちかどうか
          example: false
          default: false
        tags:
          type: array
          description: タグの配列
          items:
            type: string
          example:
            - 学生証
            - 電子工作
            - AI
            - アルゴリズム
        price:
          $ref: "#/components/schemas/price"
        priceUnit:
          $ref: "#/components/schemas/priceUnit"
        size:
          $ref: "#/components/schemas/size"
        notes:
          type: string
          description: 注記
          example: 表紙のポケットコンピュータは本誌には登場しません。
        onlineSaleUrl:
          type: string
          description: オンライン販売のURL
          pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
          example: https://csc-a452p.booth.pm/items/6439916
        salesHistory:
          $ref: "#/components/schemas/salesHistory"
        revisionHistory:
          $ref: "#/components/schemas/revisionHistory"
        additionalFields:
          type: object
          description: キーには関連情報の名称が入ります
          additionalProperties:
            type: string
            description: 情報の中身
        additionalLinks:
          type: object
          description: キーにはリンクの名称が入ります
          additionalProperties:
            type: string
            description: リンク先のURL
            pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
            example: https://example.com

    goodsItem:
      type: object
      required:
        - type
        - title
        - releaseDate
        - description
        - thumbnail
        - genre
        - tags
        - isR18
        - price
        - priceUnit
        - notes
        - salesHistory
      properties:
        type:
          type: "string"
          description: 販売品のタイプ(定数)
          enum:
            - item
        title:
          type: string
          description: タイトル全体
          example: 4bit CPU 製作基板
        releaseDate:
          type: string
          format: date
          description: 販売開始日
          example: "2024-11-09"
        description:
          type: string
          description: 紹介文
          example: 4bit CPUの基板です。制作時の注意点をまとめた冊子と、必要な部品の部品表を同梱しています。
        thumbnail:
          type: string
          description: サムネイル画像への相対アドレス
          example: /assets/goods/td4cpu/image.jpg
        author:
          type: object
          required:
            - show
            - detail
          properties:
            show:
              type: string
              description: 作者
              example: "nikachu2012"
            detail:
              type: array
              description: 著者のID一覧
              items:
                type: string
              example:
                - s23112
        genre:
          type: string
          description: ジャンルの配列
          items:
            type: string
          example:
            - parts
        isR18:
          type: boolean
          description: えっちかどうか
          example: false
          default: false
        tags:
          type: array
          description: タグの配列
          items:
            type: string
          example:
            - CPU
            - 電子工作
        price:
          $ref: "#/components/schemas/price"
        priceUnit:
          $ref: "#/components/schemas/priceUnit"
        notes:
          type: string
          description: 注記
          example: 基板のみの販売となります。動作させるためには追加パーツが必要です。
        onlineSaleUrl:
          type: string
          description: オンライン販売のURL
          pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
          example: https://csc-a452p.booth.pm/items/6439916
        salesHistory:
          $ref: "#/components/schemas/salesHistory"
        additionalFields:
          type: object
          description: キーには関連情報の名称が入ります
          additionalProperties:
            type: string
            description: 情報の中身
        additionalLinks:
          type: object
          description: キーにはリンクの名称が入ります
          additionalProperties:
            type: string
            description: リンク先のURL
            pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
            example: https://example.com

    bookCodeISDN:
      type: object
      required:
        - type
        - isdn
        - cCode
        - url
      properties:
        type:
          type: string
          description: 定数
          enum:
            - isdn
        isdn:
          type: string
          description: |
            ISDN(国際標準同人誌番号)コード  
            詳細は https://isdn.jp/about.html
          pattern: /^ISDN(?:278|279)-\d{1,5}-\d{1,7}-\d{1,2}-\d$/
          example: ISDN278-4-874194-01-7
        cCode:
          type: string
          description: |
            Cコード(図書分類コード)  
            詳細はISBNコード／日本図書コード／書籍JANコード利用の手引き p.42を参照
          pattern: /^C\d{4}$/
          example: C3455
        url:
          type: string
          description: ISDN 登録情報へのURL
          pattern: https?://[\w!\?/\+\-_~=;\.,\*&@#\$%\(\)'\[\]]+
          example: https://isdn.jp/2784874194017

    salesHistory:
      type: array
      description: 販売履歴の各データ
      items:
        type: object
        required:
          - event
          - start
          - revision
          - price
          - priceUnit
        properties:
          event:
            type: string
            description: イベント名
          start:
            type: string
            description: イベントの開始日
            example: "2024-11-09"
            format: date
          end:
            type: string
            description: イベントの終了日
            example: "2024-11-10"
            format: date
          revision:
            type: integer
            description: 販売した版
            minimum: 1
            example: 1
          price:
            $ref: "#/components/schemas/price"
          priceUnit:
            $ref: "#/components/schemas/priceUnit"

    revisionHistory:
      type: array
      description: |
        改版履歴の各データ
        版番号と刷番号、それぞれどこで販売したかのデータです。
      items:
        type: object
        required:
          - revision
          - print
          - releaseDate
          - place
        properties:
          revision:
            type: integer
            description: 版の番号
            minimum: 1
            example: 1
          print:
            type: integer
            description: 刷の番号
            minimum: 1
            example: 1
          releaseDate:
            type: string
            description: 発行日
            example: "2024-11-01"
            format: date
          place:
            type: string
            description: 発行時に販売予定だった販売先
            example: "沼津高専 第59回高専祭"
    
    notice:
      type: array
      description: |
        お知らせの各データ
        timeはミリ秒なので注意
      items:
        type: object
        required:
          - time
          - content
          - author
          - isNew
        properties:
          time:
            type: integer
            description: |
              ECMAScript元期(1970-01-01 午前00:00)からの経過**ミリ**秒数
            format: int64
            example: 1735983818228
          content:
            type: string
            description: お知らせの中身
            example: どっかでコミケ参加したいね
          author:
            type: string
            description: お知らせの投稿者名
            example: nikachu2012
          isNew: 
            type: boolean
            description: 現在のお知らせかどうか(=トップページに表示されるか)
            example: true



    size:
      type: string
      description: |
        本のサイズ ISO 216およびJIS P 0138に準拠します。  
        JIS B列を使用する場合は`JIS Bn`と表記
      pattern: /^(?:JIS\s)?[ABC]1?\d$/
      minLength: 2
      maxLength: 7
      example: A4

    price:
      type: number
      format: double
      description: 価格 (浮動小数点値である可能性があります)
      example: 500

    priceUnit:
      type: string
      format: ISO 4217
      description: |
        価格の単位コード  
        ISO 4217(alphabetic code)に準拠しています
      maxLength: 3
      minLength: 3
      example: "JPY"
